openapi: 3.0.0
info:
  title: Your Internal API
  description: Internal API documentation
  version: 1.0.0
  contact:
    name: Your Team
    email: team@company.com

# Server configuration
servers:
  - url: http://localhost:4000
    description: Development server
  - url: https://api.yourcompany.com
    description: Production server

# Tags for grouping operations
tags:
  - name: User
    description: Operations about users
  - name: Auth
    description: Authentication operations
  - name: Payment
    description: Operations about payments and billing

# API Paths and Operations
paths:
  /users:
    post:
      tags:
        - User
      summary: Create a new user
      description: Creates a new user account with the provided details.
      operationId: createUser
      requestBody:
        description: User object that needs to be added to the store
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreate"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid input provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/{userId}:
    get:
      tags:
        - User
      summary: Get user by user ID
      description: Retrieve a single user's information by their unique ID.
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: string
            pattern: '^[0-9A-HJKMNP-TV-Z]{26}$'
            example: "01ARZ3NDEKTSV4RRFFQ69G5FAV"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    put:
      tags:
        - User
      summary: Update an existing user
      description: Update an existing user's details by their unique ID. Password updates should be handled by a separate endpoint.
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          description: ID of user that needs to be updated
          required: true
          schema:
            type: string
            pattern: '^[0-9A-HJKMNP-TV-Z]{26}$'
            example: "01ARZ3NDEKTSV4RRFFQ69G5FAV"
      requestBody:
        description: User object with updated data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdate"
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid input
        "404":
          description: User not found

    delete:
      tags:
        - User
      summary: Delete a user
      description: Deletes a user by their unique ID.
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: The ID of the user that needs to be deleted
          required: true
          schema:
            type: string
            pattern: '^[0-9A-HJKMNP-TV-Z]{26}$'
            example: "01ARZ3NDEKTSV4RRFFQ69G5FAV"
      responses:
        "204":
          description: User deleted successfully (No Content)
        "404":
          description: User not found
  # interview prompts
  /interview-prompts:
    post:
      tags:
        - Interview
      summary: Generate answer for interview question
      description: Accepts a question and returns an AI-generated answer.
      operationId: generateInterviewPrompt
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InterviewPromptRequest'
      responses:
        '200':
          description: Successfully generated answer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterviewPromptResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - Interview
      summary: Get all interview prompts
      description: Returns a list of all stored interview prompts.
      operationId: listInterviewPrompts
      responses:
        '200':
          description: A list of interview prompts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterviewPromptListResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/interview/{sessionId}:
    post:
      tags:
        - Interview
      summary: interview session
      operationId: AskInterviewQuestion
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InterviewPromptRequest"
      responses:
        "200":
          description: Successfully returned generated answer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InterviewPromptResponse"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      tags:
        - Interview
      summary: Get each interview session individually
      operationId: GetInterviewQuestions
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successfully retrieved interview questions
          content:
            application/json:
              schema:
                type: object
                properties:
                  sessionId:
                    type: string
                  questions:
                    $ref: "#/components/schemas/InterviewPromptListResponse"
                  count:
                    type: integer
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Interview session not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Failed to retrieve interview questions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  #interview title
  /api/interview/title:
    get:
      tags:
        - Interview
      summary: Get user's interview titles
      description: Retrieve a list of interview sessions with their titles and creation dates.
      operationId: getUserInterviewTitles
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successfully retrieved interview titles
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/InterviewTitleResponse"
        "401":
          description: Unauthorized (JWT required)
        "500":
          description: Internal server error

  /api/interview/start:
    post:
      tags:
        - Interview
      summary: Start a new interview session
      description: Creates a new interview session with a given title for the authenticated user.
      operationId: startInterview
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
              required:
                - title
      responses:
        "200":
          description: Interview started successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  title:
                    type: string
                  createdAt:
                    type: string
                    format: date-time
        "400":
          description: Title missing in request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

# End an interview
    /api/interview/{sessionId}/end:
    post:
      tags:
        - Interview
      summary: End an existing interview session
      description: Ends an interview session using the provided session ID.
      operationId: endInterview
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Interview ended successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Failed to end interview
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # Authentication and Signup
  /api/auth/signup:
    post:
      tags:
        - Auth
      summary: Register a new user
      description: Creates a new user account using validated input.
      operationId: signupUser
      requestBody:
        required: true
        description: User signup information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSignupZod'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignupSuccess'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignupError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignupError'
  
  # User Login
  /api/auth/signin:
    post:
      tags:
        - Auth
      summary: Sign in a user
      description: Authenticate user using email or mobile number and password.
      operationId: signinUser
      requestBody:
        required: true
        description: User credentials for login
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSignin'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SigninSuccess'
        '400':
          description: Invalid input or credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SigninError'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SigninError'

  # User Signout
  /api/auth/signout:
    post:
      tags:
        - Auth
      summary: Sign out a user
      description: Invalidates the JWT by blacklisting it.
      operationId: signoutUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Signout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignoutSuccess'
        '400':
          description: Missing authorization token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignoutError'
        '401':
          description: Token is invalid or blacklisted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignoutError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignoutError'

  # Request Reset Password
  /api/auth/request-password-reset:
    post:
      tags:
        - Auth
      summary: Request password reset
      description: Sends a password reset token to the user's email.
      operationId: requestPasswordReset
      requestBody:
        required: true
        description: Email address of the user who wants to reset the password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestPasswordReset'
      responses:
        '200':
          description: Reset token sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestPasswordResetSuccess'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestPasswordResetError'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestPasswordResetError'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestPasswordResetError'

  # Reset Password
  /api/auth/reset-password:
    post:
      tags:
        - Auth
      summary: Reset user password
      description: Resets the user's password using a valid token.
      operationId: resetPassword
      security:
        - bearerAuth: []
      requestBody:
        required: true
        description: New password and confirmation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPassword'
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetPasswordSuccess'
        '400':
          description: Invalid token or input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        '401':
          description: Unauthorized or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetPasswordError'
        '403':
          description: Token has already been used
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetPasswordError'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetPasswordError'

  # Payment endpoints
  /api/payments/checkout-session:
    post:
      tags:
        - Payment
      summary: Create Stripe checkout session
      description: Creates a new Stripe checkout session for payment processing.
      operationId: createCheckoutSession
      requestBody:
        description: Checkout session details
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CheckoutSessionRequest"
      responses:
        "201":
          description: Checkout session created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckoutSessionResponse"
        "400":
          description: Invalid input provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/payments/webhook:
    post:
      tags:
        - Payment
      summary: Handle Stripe webhook
      description: Handles incoming Stripe webhook events for payment processing.
      operationId: handleStripeWebhook
      requestBody:
        description: Stripe webhook payload
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Raw Stripe webhook payload
      responses:
        "200":
          description: Webhook processed successfully
        "400":
          description: Invalid webhook signature or payload
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/payments/verify/{sessionId}:
    get:
      tags:
        - Payment
      summary: Verify payment success
      description: Verifies if a payment session was completed successfully.
      operationId: verifyPaymentSuccess
      parameters:
        - name: sessionId
          in: path
          description: Stripe session ID to verify
          required: true
          schema:
            type: string
            example: "cs_test_1234567890"
      responses:
        "200":
          description: Payment verification result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentVerificationResponse"
        "404":
          description: Session not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/payments/history/{userId}:
    get:
      tags:
        - Payment
      summary: Get payment history
      description: Retrieves payment history for a specific user.
      operationId: getPaymentHistory
      parameters:
        - name: userId
          in: path
          description: ID of user to get payment history for
          required: true
          schema:
            type: string
            pattern: '^[0-9A-HJKMNP-TV-Z]{26}$'
            example: "01ARZ3NDEKTSV4RRFFQ69G5FAV"
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of records per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        "200":
          description: Payment history retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentHistoryResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/payments/plans:
    get:
      tags:
        - Payment
      summary: Get available plans
      description: Retrieves all available interview plans and pricing.
      operationId: getPlans
      responses:
        "200":
          description: Plans retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlansResponse"
  #user crud operations
  #get user
  /api/auth/getUser:
    get:
      summary: Get current authenticated user
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Authenticated user retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSuccessResponse'
        '401':
          description: Unauthorized – Token missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserErrorResponse'
  #update user             
  /api/auth/user/{userId}:
    put:
      summary: Update user profile (including password & profile photo)
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            example: 01HYZBGXKZ6BRYBQXD6GV4MB5W
          description: ULID of the user to update
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUserSuccessResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUserErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUserErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUserErrorResponse'
  #delete user
    delete:
      summary: Delete a user and all associated data
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            example: 01HYZBGXKZ6BRYBQXD6GV4MB5W
          description: ULID of the user to delete
      responses:
        '200':
          description: User and related data deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteUserSuccessResponse'
        '400':
          description: Validation error (e.g., invalid ULID)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteUserErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteUserErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteUserErrorResponse'
  #createTicket
  /api/auth/createTicket:
    post:
      tags:
        - Support Ticket
      summary: Create a new support ticket
      description: Allows an authenticated user to create a support/help ticket.
      operationId: createSupportTicket
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSupportTicketInput'
      responses:
        '201':
          description: Support ticket created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSupportTicketResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTicketErrorResponse'
  #get ticket 
  /api/auth/ticket/{ticketId}:
    get:
      tags:
        - Support Ticket
      summary: View a support ticket by ID
      description: Returns ticket and user info. No authentication required.
      operationId: getSupportTicketById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Ticket ID (UUID)
      responses:
        '200':
          description: Ticket retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewSupportTicketResponse'
        '404':
          description: Ticket not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewTicketErrorResponse'



# Reusable Components
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Use the JWT token for authentication. Include it in the Authorization header as "Bearer {token}"
  
  schemas:
    # Schema for creating a user (includes passwords)
    UserCreate:
      type: object
      required:
        - name
        - email
        - password
        - passwordConfirmation
      properties:
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        mobileNumber:
          type: string
          pattern: '^\+[1-9]\d{1,14}$'
          example: "+14155552671"
        password:
          type: string
          format: password
          description: User's password (at least 8 characters)
          example: "strongPassword123"
        passwordConfirmation:
          type: string
          format: password
          description: Confirmation of the user's password
          example: "strongPassword123"

    # Schema for updating a user (passwords are not updated here)
    UserUpdate:
      type: object
      properties:
        name:
          type: string
          example: "Johnathan Doe"
        email:
          type: string
          format: email
          example: "johnathan.doe@example.com"
        mobileNumber:
          type: string
          pattern: '^\+[1-9]\d{1,14}$'
          example: "+14155552672"

    # Schema for API responses (does NOT include sensitive info like passwords)
    User:
      type: object
      properties:
        id:
          type: string
          pattern: '^[0-9A-HJKMNP-TV-Z]{26}$'
          example: "01ARZ3NDEKTSV4RRFFQ69G5FAV"
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        mobileNumber:
          type: string
          example: "+14155552671"
        interviewCredits:
          type: integer
          example: 5
        profilePicture:
          type: string
          nullable: true
          example: "https://example.com/profile.jpg"
        isActive:
          type: boolean
          example: true
        emailVerified:
          type: boolean
          example: true
        mobileNumberVerified:
          type: boolean
          example: false
        createdAt:
          type: string
          format: date-time
          example: "2024-07-29T10:30:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-07-29T10:30:00Z"


    # InterviewPromptRequest
    InterviewPromptRequest:
      type: object
      required:
        - question
      properties:
        question:
          type: string
          example: "What is Java?"

    InterviewPromptResponse:
      type: object
      properties:
        question:
          type: string
          example: "What is Java?"
        data:
          type: object
          properties:
            id:
              type: string
              example: "dadef5c5b011435b9d6f751ae4"
            question:
              type: string
              example: "What is Java?"
            answer:
              type: string
              example: "Java is an object-oriented programming language..."
            createdAt:
              type: string
              format: date-time
              example: "2025-06-18T07:53:07.336Z"

    # schema for to get all interview-prompts 
    InterviewPromptRequest:
      type: object
      required:
        - question
      properties:
        question:
          type: string
          example: "What is Java?"

    InterviewPromptResponse:
      type: object
      properties:
        question:
          type: string
          example: "What is Java?"
        data:
          type: object
          properties:
            id:
              type: string
              example: "dadef5c5b011435b9d6f751ae4"
            question:
              type: string
              example: "What is Java?"
            answer:
              type: string
              example: "Java is an object-oriented programming language..."
            createdAt:
              type: string
              format: date-time
              example: "2025-06-18T07:53:07.336Z"

    InterviewPromptListResponse:
      type: array
      items:
        type: object
        properties:
          id:
            type: string
            example: "7a461cb3c6644bf194dcdcc522"
          question:
            type: string
            example: "What is Java?"
          answer:
            type: string
            example: "Java is a programming language..."
          createdAt:
            type: string
            format: date-time
            example: "2025-06-23T10:54:19.561Z"

    Error:
      type: object
      properties:
        message:
          type: string
          example: "Something went wrong."

          components:
    #InterviewPromptRequest
    InterviewPromptRequest:
      type: object
      required:
        - question
        - interviewType
      properties:
        question:
          type: string
        interviewType:
          type: string
          enum:
            - SYSTEM_DESIGN
            - BEHAVIORAL
            - CODING

    InterviewPromptResponse:
      type: object
      properties:
        id:
          type: string
        question:
          type: string
        answer:
          type: string
        type:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        userId:
          type: string
        interviewSessionId:
          type: string

    InterviewPromptListResponse:
      type: array
      items:
        $ref: "#/components/schemas/InterviewPromptResponse"

    Error:
      type: object
      properties:
        message:
          type: string

    # Schema for user signup with Zod validation
    UserSignupZod:
      type: object
      required:
        - name
        - email
        - password
        - confirmPassword
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 50
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john@example.com"
        mobileNumber:
          type: string
          description: Optional 10-digit mobile number
          pattern: '^\d{10}$'
          example: "9876543210"
        password:
          type: string
          minLength: 6
          maxLength: 50
          example: "SecurePass123"
        confirmPassword:
          type: string
          minLength: 6
          example: "SecurePass123"

    # Schema for successful signup response
    SignupSuccess:
      type: object
      properties:
        data:
          type: object
          properties:
            message:
              type: string
              example: "User registered successfully"
            token:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            user:
              type: object
              properties:
                id:
                  type: string
                  example: "01HZV18H0P4DEKQYAZWXP30ZMP"
                name:
                  type: string
                  example: "John Doe"
                email:
                  type: string
                  format: email
                  example: "john@example.com"
                mobileNumber:
                  type: string
                  example: "9876543210"
                createdAt:
                  type: string
                  format: date-time
                  example: "2025-06-18T13:15:34.000Z"

    # Schema for signup error response
    SignupError:
      type: object
      properties:
        error:
          type: string
          example: "Passwords do not match"

    # Schema for user signin request
    UserSignin:
      type: object
      required:
        - identifier
        - password
      properties:
        identifier:
          type: string
          description: Email (lowercase) or 10-digit mobile number
          example: "john@example.com"
        password:
          type: string
          minLength: 6
          maxLength: 50
          format: password
          example: "StrongPass123"

    # Schema for successful signin response
    SigninSuccess:
      type: object
      properties:
        data:
          type: object
          properties:
            token:
              type: string
              description: JWT access token
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            user:
              type: object
              properties:
                id:
                  type: string
                  example: "01HZV18H0P4DEKQYAZWXP30ZMP"
                name:
                  type: string
                  example: "John Doe"
                email:
                  type: string
                  format: email
                  example: "john@example.com"
                mobileNumber:
                  type: string
                  example: "9876543210"
                createdAt:
                  type: string
                  format: date-time
                  example: "2025-06-18T13:15:34.000Z"

    # Schema for signin error response
    SigninError:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 400
        message:
          type: string
          example: "Invalid email or password"

    # Schema for successful signout response
    SignoutSuccess:
      type: object
      properties:
        data:
          type: "null"
          nullable: true
          example: null

    # Schema for signout error response
    SignoutError:
      type: object
      properties:
        code:
          type: integer
          example: 401
        message:
          type: string
          example: "Token already blacklisted"

    # Schema for requesting password reset
    RequestPasswordReset:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          example: "john@example.com"

    # Schema for successful password reset request
    RequestPasswordResetSuccess:
      type: object
      properties:
        data:
          type: string
          description: JWT reset token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        message:
          type: string
          example: "Reset password link sent to email"

    # Schema for password reset request error
    RequestPasswordResetError:
      type: object
      properties:
        error:
          type: string
          example: "Invalid input or token"

    # Schema for resetting password
    ResetPassword:
      type: object
      required:
        - password
        - confirmPassword
      properties:
        password:
          type: string
          minLength: 6
          example: "newStrongPassword123"
        confirmPassword:
          type: string
          minLength: 6
          example: "newStrongPassword123"

    # Schema for successful password reset
    ResetPasswordSuccess:
      type: object
      properties:
        message:
          type: string
          example: "Password reset successfully"
        data:
          $ref: '#/components/schemas/User'

    # Schema for password reset error
    ResetPasswordError:
      type: object
      properties:
        error:
          type: string
          example: "Invalid input or token"

    # Payment related schemas
    CheckoutSessionRequest:
      type: object
      required:
        - planId
        - userId
      properties:
        planId:
          type: string
          enum: ["free_trial", "interview_bundle", "single_interview"]
          example: "interview_bundle"
        userId:
          type: string
          pattern: '^[0-9A-HJKMNP-TV-Z]{26}$'
          example: "01ARZ3NDEKTSV4RRFFQ69G5FAV"
        successUrl:
          type: string
          format: uri
          example: "https://yourapp.com/success"
        cancelUrl:
          type: string
          format: uri
          example: "https://yourapp.com/cancel"

    CheckoutSessionResponse:
      type: object
      properties:
        sessionId:
          type: string
          example: "cs_test_1234567890"
        url:
          type: string
          format: uri
          example: "https://checkout.stripe.com/pay/cs_test_1234567890"

    Payment:
      type: object
      properties:
        id:
          type: string
          pattern: '^[0-9A-HJKMNP-TV-Z]{26}$'
          example: "01BX5ZZKBKACT-8RNJEHP-S-T9"
        stripeSessionId:
          type: string
          nullable: true
          example: "cs_test_1234567890"
        stripePaymentIntentId:
          type: string
          nullable: true
          example: "pi_test_1234567890"
        amount:
          type: number
          format: decimal
          example: 249.00
        currency:
          type: string
          example: "INR"
        planType:
          type: string
          example: "interview_bundle"
        interviewCredits:
          type: integer
          example: 5
        status:
          type: string
          enum: ["pending", "completed", "failed", "cancelled"]
          example: "completed"
        paymentMethod:
          type: string
          nullable: true
          example: "card"
        receiptUrl:
          type: string
          nullable: true
          format: uri
          example: "https://pay.stripe.com/receipts/example"
        metadata:
          type: object
          nullable: true
          additionalProperties: true
        userId:
          type: string
          pattern: '^[0-9A-HJKMNP-TV-Z]{26}$'
          example: "01ARZ3NDEKTSV4RRFFQ69G5FAV"
        createdAt:
          type: string
          format: date-time
          example: "2024-07-29T10:30:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-07-29T10:30:00Z"

    PaymentVerificationResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        session:
          type: object
          properties:
            id:
              type: string
              example: "cs_test_1234567890"
            status:
              type: string
              example: "complete"
            payment_status:
              type: string
              example: "paid"
        payment:
          $ref: "#/components/schemas/Payment"

    PaymentHistoryResponse:
      type: object
      properties:
        payments:
          type: array
          items:
            $ref: "#/components/schemas/Payment"
        pagination:
          type: object
          properties:
            page:
              type: integer
              example: 1
            limit:
              type: integer
              example: 10
            total:
              type: integer
              example: 25
            totalPages:
              type: integer
              example: 3

    Plan:
      type: object
      properties:
        id:
          type: string
          example: "interview_bundle"
        name:
          type: string
          example: "Power Pack"
        amount:
          type: integer
          example: 24900
        priceInCents:
          type: integer
          example: 24900
        credits:
          type: integer
          example: 5
        label:
          type: string
          example: "₹249 / 5 interviews"
        description:
          type: string
          example: "For the serious job seeker. Be prepared for every round."
        features:
          type: array
          items:
            type: string
          example:
            - "5 Interview Credits"
            - "Over 50% discount per interview"
            - "Credits never expire"
            - "Full access to all features"
        actionLabel:
          type: string
          example: "Buy Power Pack"
        popular:
          type: boolean
          example: true
        isFree:
          type: boolean
          example: false
        formattedPrice:
          type: string
          example: "₹249"
        currency:
          type: string
          example: "INR"
        symbol:
          type: string
          example: "₹"

    PlansResponse:
      type: object
      properties:
        plans:
          type: array
          items:
            $ref: "#/components/schemas/Plan"

    # Generic Error Schema
    Error:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
      example:
        code: 404
        message: "Resource not found"

    # Generic Error Schema (alternative name for compatibility)
    GenericError:
      type: object
      properties:
        error:
          type: string
          example: "Invalid input or token"
    
    #get User Schema
    schemas:
    UserSuccessResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/UserResponse'

    UserResponse:
      type: object
      properties:
        id:
          type: string
          example: "01HYZBGXKZ6BRYBQXD6GV4MB5W"
        name:
          type: string
          example: "Madduru Naveen"
        email:
          type: string
          example: "jon@example.com"
        mobileNumber:
          type: string
          example: "1234567890"
        interviewCredits:
          type: integer
          example: 5
        createdAt:
          type: string
          format: date-time
          example: "2024-06-20T12:34:56.789Z"

    GetUserErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "Unauthorized"

    #Update User
    UpdateUserRequest:
      type: object
      properties:
        name:
          type: string
          example: Madduru Naveen
        email:
          type: string
          format: email
          example: naveen@example.com
        mobileNumber:
          type: string
          example: "+918618362975"
        role:
          type: string
          example: "user"
        currentPassword:
          type: string
          example: "oldPass123"
        changePassword:
          type: string
          example: "newPass456"
        profilePhoto:
          type: string
          format: binary
      required: []

    UpdateUserSuccessResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            id:
              type: string
              example: 01HYZBGXKZ6BRYBQXD6GV4MB5W
            name:
              type: string
              example: Madduru Naveen
            email:
              type: string
              example: john@example.com
            mobileNumber:
              type: string
              example: "9876543212"
            role:
              type: string
              example: user
            profilePicture:
              type: string
              example: "https://cdn.example.com/uploads/naveen.jpg"
        message:
          type: string
          example: profile updated successfully

    UpdateUserErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: User not found

    #Delete user
    DeleteUserSuccessResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            message:
              type: string
              example: User account and associated data deleted

    DeleteUserErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: User not foun

  #Support Ticket
      CreateSupportTicketInput:
      type: object
      required:
        - subject
        - message
      properties:
        subject:
          type: string
          example: "Error in update password"
        message:
          type: string
          example: "When I try to update my password, I get a server error."

    CreateSupportTicketResponse:
      type: object
      properties:
        data:
          type: string
          example: "Support ticket submitted successfully"

    CreateTicketErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "Ticket not found"

    ViewSupportTicketResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            ticket:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                subject:
                  type: string
                message:
                  type: string
                status:
                  type: string
                  enum: [open, in_progress, resolved]
                createdAt:
                  type: string
                  format: date-time
                updatedAt:
                  type: string
                  format: date-time
                userId:
                  type: string
            user:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                name:
                  type: string
                email:
                  type: string

    ViewTicketErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "Ticket not found"
