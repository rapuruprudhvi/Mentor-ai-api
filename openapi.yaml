openapi: 3.0.0
info:
  title: Your Internal API
  description: Internal API documentation
  version: 1.0.0
  contact:
    name: Your Team
    email: team@company.com

# Server configuration
servers:
  - url: http://localhost:4000
    description: Development server
  - url: https://api.yourcompany.com
    description: Production server

# Tags for grouping operations
tags:
  - name: User
    description: Operations about users

# API Paths and Operations
paths:
  /users:
    post:
      tags:
        - User
      summary: Create a new user
      description: Creates a new user account with the provided details.
      operationId: createUser
      requestBody:
        description: User object that needs to be added to the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{userId}:
    get:
      tags:
        - User
      summary: Get user by user ID
      description: Retrieve a single user's information by their unique ID.
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: string
            format: uuid
            example: 'd290f1ee-6c54-4b01-90e6-d701748f0851'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - User
      summary: Update an existing user
      description: Update an existing user's details by their unique ID. Password updates should be handled by a separate endpoint.
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          description: ID of user that needs to be updated
          required: true
          schema:
            type: string
            format: uuid
            example: 'd290f1ee-6c54-4b01-90e6-d701748f0851'
      requestBody:
        description: User object with updated data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
        '404':
          description: User not found

    delete:
      tags:
        - User
      summary: Delete a user
      description: Deletes a user by their unique ID.
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: The ID of the user that needs to be deleted
          required: true
          schema:
            type: string
            format: uuid
            example: 'd290f1ee-6c54-4b01-90e6-d701748f0851'
      responses:
        '204':
          description: User deleted successfully (No Content)
        '404':
          description: User not found
    # interview prompts
  /interview-prompts:
    post:
      tags:
        - Interview
      summary: Generate answer for interview question
      description: Accepts a question and returns an AI-generated answer.
      operationId: generateInterviewPrompt
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InterviewPromptRequest'
      responses:
        '200':
          description: Successfully generated answer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterviewPromptResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

      # get all question and answers
    /interview-prompts:
    get:
      tags:
        - Interview
      summary: Get all interview prompts
      description: Returns a list of all stored interview prompts.
      operationId: listInterviewPrompts
      responses:
        '200':
          description: A list of interview prompts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterviewPromptListResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

# Authentication and Signup
  /api/auth/signup:
    post:
      tags:
        - Auth
      summary: Register a new user
      description: Creates a new user account using validated input.
      operationId: signupUser
      requestBody:
        required: true
        description: User signup information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSignupZod'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignupSuccess'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignupError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignupError'
  
#User Login
  /api/auth/signin:
    post:
      tags:
        - Auth
      summary: Sign in a user
      description: Authenticate user using email or mobile number and password.
      operationId: signinUser
      requestBody:
        required: true
        description: User credentials for login
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSignin'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SigninSuccess'
        '400':
          description: Invalid input or credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SigninError'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SigninError'

# User Signout
  /api/auth/signout:
    post:
      tags:
        - Auth
      summary: Sign out a user
      description: Invalidates the JWT by blacklisting it.
      operationId: signoutUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Signout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignoutSuccess'
        '400':
          description: Missing authorization token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignoutError'
        '401':
          description: Token is invalid or blacklisted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignoutError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignoutError'
# Request Reset Password
  /api/auth/request-password-reset:
    post:
      tags:
        - Auth
      summary: Request password reset
      description: Sends a password reset token to the user's email.
      operationId: requestPasswordReset
      requestBody:
        required: true
        description: Email address of the user who wants to reset the password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestPasswordReset'
      responses:
        '200':
          description: Reset token sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestPasswordResetSuccess'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestPasswordResetError'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestPasswordResetError'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestPasswordResetError'

# Reset Password
  /api/auth/reset-password:
    post:
      tags:
        - Auth
      summary: Reset user password
      description: Resets the user's password using a valid token.
      operationId: resetPassword
      security:
        - bearerAuth: []
      requestBody:
        required: true
        description: New password and confirmation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPassword'
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetPasswordSuccess'
        '400':
          description: Invalid token or input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        '401':
          description: Unauthorized or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetPasswordError'
        '403':
          description: Token has already been used
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetPasswordError'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetPasswordError'


# Reusable Components
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Use the JWT token for authentication. Include it in the Authorization header as "Bearer {token}"
  schemas:
    # Schema for creating a user (includes passwords)
    UserCreate:
      type: object
      required:
        - name
        - email
        - password
        - passwordConfirmation
      properties:
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        mobileNumber:
          type: string
          pattern: '^\+[1-9]\d{1,14}$'
          example: "+14155552671"
        password:
          type: string
          format: password
          description: User's password (at least 8 characters)
          example: "strongPassword123"
        passwordConfirmation:
          type: string
          format: password
          description: Confirmation of the user's password
          example: "strongPassword123"

    # Schema for updating a user (passwords are not updated here)
    UserUpdate:
      type: object
      properties:
        name:
          type: string
          example: "Johnathan Doe"
        email:
          type: string
          format: email
          example: "johnathan.doe@example.com"
        mobileNumber:
          type: string
          pattern: '^\+[1-9]\d{1,14}$'
          example: "+14155552672"

    # Schema for API responses (does NOT include sensitive info like passwords)
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "d290f1ee-6c54-4b01-90e6-d701748f0851"
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        mobileNumber:
          type: string
          example: "+14155552671"
        createdAt:
          type: string
          format: date-time
          example: "2024-07-29T10:30:00Z"

    # Generic Error Schema
    Error:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
      example:
        code: 404
        message: "Resource not found"


# InterviewPromptRequest
    InterviewPromptRequest:
      type: object
      required:
        - question
      properties:
        question:
          type: string
          example: "What is Java?"

    InterviewPromptResponse:
      type: object
      properties:
        question:
          type: string
          example: "What is Java?"
        data:
          type: object
          properties:
            id:
              type: string
              example: "dadef5c5b011435b9d6f751ae4"
            question:
              type: string
              example: "What is Java?"
            answer:
              type: string
              example: "Java is an object-oriented programming language..."
            createdAt:
              type: string
              format: date-time
              example: "2025-06-18T07:53:07.336Z"

      # schema for to get all interview-prompts
      
    InterviewPromptRequest:
      type: object
      required:
        - question
      properties:
        question:
          type: string
          example: "What is Java?"

    InterviewPromptResponse:
      type: object
      properties:
        question:
          type: string
          example: "What is Java?"
        data:
          type: object
          properties:
            id:
              type: string
              example: "dadef5c5b011435b9d6f751ae4"
            question:
              type: string
              example: "What is Java?"
            answer:
              type: string
              example: "Java is an object-oriented programming language..."
            createdAt:
              type: string
              format: date-time
              example: "2025-06-18T07:53:07.336Z"

    InterviewPromptListResponse:
      type: array
      items:
        type: object
        properties:
          id:
            type: string
            example: "7a461cb3c6644bf194dcdcc522"
          question:
            type: string
            example: "What is Java?"
          answer:
            type: string
            example: "Java is a programming language..."
          createdAt:
            type: string
            format: date-time
            example: "2025-06-23T10:54:19.561Z"

    Error:
      type: object
      properties:
        message:
          type: string
          example: "Something went wrong."

    # Schema for user signup response
    UserSignupZod:
      type: object
      required:
        - name
        - email
        - password
        - confirmPassword
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 50
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john@example.com"
        mobileNumber:
          type: string
          description: Optional 10-digit mobile number
          pattern: '^\d{10}$'
          example: "9876543210"
        password:
          type: string
          minLength: 6
          maxLength: 50
          example: "SecurePass123"
        confirmPassword:
          type: string
          minLength: 6
          example: "SecurePass123"
    # Schema for successful signup response
    SignupSuccess:
      type: object
      properties:
        data:
          type: object
          properties:
            message:
              type: string
              example: "User registered successfully"
            token:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            user:
              type: object
              properties:
                id:
                  type: string
                  example: "01HZV18H0P4DEKQYAZWXP30ZMP"
                name:
                  type: string
                  example: "John Doe"
                email:
                  type: string
                  format: email
                  example: "john@example.com"
                mobileNumber:
                  type: string
                  example: "9876543210"
                createdAt:
                  type: string
                  format: date-time
                  example: "2025-06-18T13:15:34.000Z"

    # Schema for error response
    SignupError:
      type: object
      properties:
        error:
          type: string
          example: "Passwords do not match"
      type: object
      properties:
        error:
          type: string
          example: "User already exists"
   
    # Schema for user signin request
    UserSignin:
      type: object
      required:
        - identifier
        - password
      properties:
        identifier:
          type: string
          description: Email (lowercase) or 10-digit mobile number
          example: "john@example.com"
        password:
          type: string
          minLength: 6
          maxLength: 50
          format: password
          example: "StrongPass123"

    SigninSuccess:
      type: object
      properties:
        data:
          type: object
          properties:
            token:
              type: string
              description: JWT access token
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            user:
              type: object
              properties:
                id:
                  type: string
                  example: "01HZV18H0P4DEKQYAZWXP30ZMP"
                name:
                  type: string
                  example: "John Doe"
                email:
                  type: string
                  format: email
                  example: "john@example.com"
                mobileNumber:
                  type: string
                  example: "9876543210"
                createdAt:
                  type: string
                  format: date-time
                  example: "2025-06-18T13:15:34.000Z"

    SigninError:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 400
        message:
          type: string
          example: "Invalid email or password"

    #schema for signout response
    SignoutSuccess:
      type: object
      properties:
        data:
          type: "null"
          nullable: true
          example: null

    SignoutError:
      type: object
      properties:
        code:
          type: integer
          example: 401
        message:
          type: string
          example: "Token already blacklisted"
      type: object
      properties:
        code:
          type: integer
          example: 400
        message:
          type: string
          example: "Authorization token not provided"
      type: object
      properties:
        code: 500
        message: "Internal server error"

    # Schema for requesting password reset
    RequestPasswordReset:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          example: "john@example.com"

    RequestPasswordResetSuccess:
      type: object
      properties:
        data:
          type: string
          description: JWT reset token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        message:
          type: string
          example: "Reset password link sent to email"

    RequestPasswordResetError:
      type: object
      properties:
        error:
          type: string
          example: "Invalid input or token"

    # Schema for resetting password
    ResetPassword:
      type: object
      required:
        - password
        - confirmPassword
      properties:
        password:
          type: string
          minLength: 6
          example: "newStrongPassword123"
        confirmPassword:
          type: string
          minLength: 6
          example: "newStrongPassword123"

    ResetPasswordSuccess:
      type: object
      properties:
        message:
          type: string
          example: "Password reset successfully"
        data:
          $ref: '#/components/schemas/User'

    ResetPasswordError:
      type: object
      properties:
        error:
          type: string
          example: "Invalid input or token"
